// version 13Sep2015var Cf=new CF(),    R,K,N,S,    Dec;function DoERROR(){return false};function resetERROR(){self.onerror=DoERROR;return true};function HALT(msg){alert("**Problem**\r"+msg);self.onerror=resetERROR;ERROR();alert("aagh - after HALT")};var ErrorAt="",ErrorIn="";function ERRORHandler(msg,error,line){alert("There is a problem with "+ErrorAt+":\r"+ErrorIn+" is not a number.");return true};//  Make a window Pop Upvar debug=false,record=false;var _auxwin;if(debug){_auxwin=window.open("","tip","width=500,height=400,scrollbars=yes,resizable=yes,status=yes");          _auxwin.document.open("text/plain")         };function _AuxWinOpen(typ){  //default typ=="html"  //alert(typ);  _auxwin=window.open("","tip","width=500,height=400,scrollbars=yes,resizable=yes,status=yes");    //if already open, does nothing  //if(typ && typ=="plain"){_auxwin.document.open("text/plain")}else{_auxwin.document.open()};  _auxwin.focus()};function DBG(args){  //no args means clear _auxwin window  if(!debug)return;  if(arguments.length==0){_auxwin.document.close();_auxwin.document.open("text/plain");}  else {for(var i=0;i<arguments.length;i++)          _auxwin.document.write(arguments[i]);        _auxwin.document.writeln();       };};function simplifyrns(r,n,s){  //check for common factors...  // var FF=sqrfactor(n);var F=Math.round(Math.sqrt(FF));  //n=F*F*(n/FF)  var g=gcd(r,Math.round(Math.sqrt(sqrfactor(gcd(n,s*s)))));  //if(debug)DBG("r="+r+" n="+n+" s="+s+"  g="+g);  r=Math.round(r/g);s=Math.round(s/g);n=Math.round(n/(g*g));  return {R:r,N:n,S:s}}function simplifyRKNS(r,k,n,s){  //r,s may be <0. n>0.  k in Z   <- (r+k*sqrt(n))/s // putmsg("$SimpRKNS0 "+[r,k,n,s]+" -> "+showrkns(r,k,n,s));  if(arguments.length==1){s=r.S;n=r.N;k=r.K,r=r.R};  var inp=showrkns(r,k,n,s);  var Kk,Nn,Rr=r,simpled=false;  Kk=(n!=0?Math.sqrt(sqrfactor(n)):1)  Nn=Math.round(n/Kk/Kk); // ASSERT sqrt(n) = K sqrt(nn)   simpled=Kk!=1;  Kk=k*Kk; // may be neg // putmsg("$SimpRKNSa "+[Rr,Kk,Nn,s]+" -> "+showrkns(Rr,Kk,Nn,s));   if(Nn==1){Rr=eval(Rr+Kk);Kk=0;Nn=0;simpled=true}   else if(Nn==0||Kk==0){Kk=0;Nn=0}; // putmsg("$SimpRKNSb "+[Rr,Kk,Nn,s]+" -> "+showrkns(Rr,Kk,Nn,s)); //if((Nn==0||Kk==0)&&s<0){Rr=-Rr;s=-s;Nn=0;Kk=0;simpled=true};   if(s<0){Rr=-Rr;Kk=-Kk;s=-s;simpled=true};   //putmsg("$SimpRKNSc "+[Rr,Kk,Nn,s]+" -> "+showrkns(Rr,Kk,Nn,s));   //putmsg("gcd... "+[Rr==0?1:Rr,Kk==0?1:Kk,s]);   if(Rr!=0||Kk!=0)  {var g=(Rr==0?gcd(Kk,s):Kk==0?gcd(Rr,s):gcd(Rr,gcd(Kk,s)));  if(g>1){Rr=Rr/g;Kk=Kk/g,s=s/g;simpled=true};// putmsg("gcd "+g); //putmsg("$simplifyRKNS<- "+[Rr,Kk,Nn,s]+" = "+showrkns(Rr,Kk,Nn,s));  }  //if(simpled)putmsg("$simpRKNS<- "+inp+" = "+[Rr,Kk,Nn,s]);  return {R:Rr,K:Kk,N:Nn,S:s,simplified:simpled}}function RKNStype(rkns){  //putmsg("RKNStype "+[rkns.R,rkns.K,rkns.N,rkns.S]);  if(rkns.N!=0)return "sqrt"  else if((rkns.R!=0||(rkns.K!=0&&rkns.N!=0))&&rkns.S!=1)return "rat"  else return "int"};function getRKNS(prefx,opts){  //opts::string:  - allows neg value of expr; 0 allows 0; raw -> no simplf  if(arguments.length<1)prefx="";  if(arguments.length<2)opts="";  var r=getInput(prefx+"R","the first number in the numerator of the Fraction","ZOeval"),sgn,      n=getInput(prefx+"N","the value square-rooted in the numerator of the Fraction","ZOeval"+(opts.indexOf("-")!=-1?"-":"")),      s=getInput(prefx+"S","the denominator of the Fraction","ZOeval"),k,str;  sgn = ((n!=""||n!=0)&&document.getElementsByName(prefx+"SGN")        ?getRADIOval(prefx+"SGN","+ or -")        :"+"); // putmsg("$getRKNS reads "+[r,sgn,n,s]);  if(s=="0")HALT("The denominator cannot be 0");  if(opts.indexOf("0")==-1 && r==""&&n=="")HALT("The numerator of the Fraction is missing or is zero")  if(r=="")r=0;  if(n=="")n=0;  if(s=="")s=1;  if(sgn=="-"){k=-1}else{k=1};  //if(r+k*Math.sqrt(n)==0)putmsg("The numerator of the Fraction cannot be zero");  r=eval(r);k=eval(k);n=eval(n);s=eval(s);    var v=(r+k*Math.sqrt(n))/s;  Dec=v;  if(v<0&&opts.indexOf("-")==-1)    {putmsg(showrkns(r,k,n,s)+" = "+v+" is negative");HALT("The square-root expression must be positive")}  if(n<0&&opts.indexOf("-")==-1)HALT("The square-root of a negative number is not allowed."); // if((r+k*Math.sqrt(n))/s<=0)HALT("The fraction must be greater than 0. It's value is "+(r+k*Math.sqrt(n))/s) //putmsg("$getRKNS 1 @"+prefx+" "+[r,k,n,s]);  if(opts.indexOf("raw")==-1)  { var rkns=simplifyRKNS(r,k,n,s);   if(rkns.simplified)   {str=showrkns(r,k,n,s)+" = ";    r=rkns.R;k=rkns.K;s=rkns.S;n=rkns.N;    str+=showrkns(r,k,n,s);    putmsg(str)   };// putmsg("getRKNS 2 @"+prefx+" "+[r,k,n,s]);  }  return {R:r,K:k,N:n,S:s}};function setRKNS(r,n,s,prefx){  // putmsg("$$setRKNS@"+prefx+" "+[r,n,s]);   if(arguments.length==2){prefx==n;};   if(arguments.length<=2){s=r.S;n=r.N*r.K*r.K;r=r.R};   if(r=="")r=0; if(n=="")n=0; if(s=="")s=1;   var rkns=simplifyRKNS(r,1,n,s),k;   r=rkns.R;n=rkns.N;s=rkns.S;k=rkns.K;//  putmsg("$setRKNS "+r+" "+k+"*"+n+" /"+s+" @"+prefx+" "+[isInt(r),isInt(n),isInt(s)]);  if(s<0){r=-r;s=-s;k=-k};  checkRADIOval(prefx+"SGN",(k>=0||n==0?"+":"-"))  getElementById(prefx+"R").value=(r==0?"":r);  getElementById(prefx+"N").value=(n==0||k==0?"":n*k*k);  getElementById(prefx+"S").value=(s==1?"":s)  //set GLOBALS  R=r;K=k;N=n;S=s};  function showrkns(r,k,n,s,plusmnQ){ // ( r+ksqrt(n) )/s  if(arguments.length==2)plusmnQ=k;  if(arguments.length<=2){s=r.S;n=r.N;k=r.K;r=r.R};  if(plusmnQ){n=n*k*k;k=1}  var top=(r+k*Math.sqrt(n)==0?"0":        (r==0?"":r)+           (n!=0?(plusmnQ?"&plusmn;"                  :(r!=0&&k>0?"+":k<0?"-":"")+(Math.abs(k)!=1?Math.abs(k):""))                   +"<span class=radic>&radic;</span><span class=overline>"+n+"</span>"          :"")        );//  putmsg("$showrkns "+top+"/"+s);  return (top==0?"0"         :(s!=1 ? (n==0||r==0?"":"(") : "")         + top +         (s!=1 ? (n==0||r==0?"":")") : "")         +(s==1?"":"/"+s))};function showrknsdc(r,k,n,s,d,c){  if(arguments.length==1)	 {  var prefx=r, rkns=getRKNS(prefx);		var r=rkns.R,n=rkns.N,s=rkns.S,k=rkns.K;	   // putmsg("$showrnsdc rkns "+rkns);		var d=getElementById(prefx+"dec").value;		var c=Cf.cftoString(true)};  //putmsg("$showrnsdc("+r+","+n+","+s+","+d+","+c+")"+isInt(r)); // rsns=simplifyRKNS(r,1,n,s); // r=rsns.R;n=rsns.N;s=rsns.S;k=rsns.K;  return (r!=0||n!=0||s!=0?showrkns(r,k,n,s):"")  +(isInt(d)?"":" = "+d)+" = "+c};function recrd(prefx,showQ){ // if(!document.ans.Record.checked)return; if(arguments.length==0)prefx="cf"; if(arguments.length<2)showQ=true; //putmsg("recrd @"+prefx); var rkns=getRKNS(prefx); var r=rkns.R,n=rkns.N,s=rkns.S,k=rkns.K;     c=Cf.cftoString();     d=Cf.toDec()     //putmsg("recrd dec<- "+d);   //  if(setIN)   //    {getElementById("cffixedIN").value=Cf.cf[0]+"; "+Cf.cf.slice(1).join(", ");   //     getElementById("cfrepIN").value=Cf.cfrec.join(", ") }     Cf.cvgts();  if(showQ)putmsg(showrknsdc(r,k,n,s,d,c));};function _AuxWinHTML(lines){  var TITLE="",i=0;  _AuxWinOpen("html");  if(beginswith(arguments[0],"OPT")){i=1;eval(arguments[0].substring(3))};  with(_auxwin.document)    {writeln("<html><head><title>",TITLE,"</title></head><body>");    for(i;i<arguments.length;i++)          writeln(arguments[i]);    writeln("<hr><div align=center>",    "<form><input type='button' value='Close' onClick='window.close()'>",    "<input type=reset value='Clear'></form>",    "</div></body></html>")    };  _auxwin.document.close()}function _AuxWinPlain(msg){  _AuxWinOpen("plain");  with(_auxwin.document)    for(var i=0;i<arguments.length;i++)          writeln(arguments[i]);  _auxwin.document.close()}// -------------function isempty(fld,alt){return (fld.replace(/\s/g,"")=="" || (arguments.length==2 ? fld==alt : false) ) };function isINT(v,txt,e){var i;   v=v.replace(/\s/g,"");  if(v.indexOf(".")!=-1)HALT(txt+" must be a whole number.\rUse the 'Decimal:' box for decimal number values.");  if(v==""){if(arguments.length>=3){return e}else{return Number.NaN}};  ErrorAt=txt;ErrorIn=v;self.onerror=ERRORHandler;i=eval(v);self.onerror=DoERROR;  if(isNaN(i))HALT(txt+" is not a number.");  if(i.toString()!=v && v.replace(/\d/g,"")=="")HALT("The number "+txt+" is too long:\r"+v);  return i};function isREAL(v,txt,e){   v=v.replace(/,/g,"").replace(/\s/g,"");  if(v==""){if(arguments.length>=3){return e}else{return Number.NaN}};  var r=parseFloat(v);  if(isNaN(r))HALT(txt+" is not a number.");  return r};function justify(s,fw,opt){var i;  if(typeof s != "string")s=s.toString();  if(arguments.length<3)opt="L";       if(opt=="L")for(i=s.length;i<fw;i++)s=s+" "  else if(opt=="R")for(i=s.length;i<fw;i++)s=" "+s;  else if(opt=="C")for(i=s.length;i<fw;i++)s=(i%2==0?" "+s:s+" ");  return s};function SIGN(x){return (x==0?0:x<0?-1:1)};function setupCfIN(fxd,rep,prefx){   getElementById(prefx+"fixedIN").value=fxd   getElementById(prefx+"repIN").value=rep   putmsg("setupCfIN@"+prefx+" fxd="+fxd+" rep="+rep);};function cfsetIN(prefx){  // Cf -> cf IN flds  //putmsg("$cfsetIN @"+prefx+" "+Cf);  if(arguments.length==0)prefx="cf"  var s=Cf.cf[0]+"; ";  if(Cf.cf.length==1){getElementById(prefx+"fixedIN").value=s}  else  {  s=s+Cf.cf.slice(1).join(", ");    if(Cf.isPeriodic())s=s+", ";    getElementById(prefx+"fixedIN").value=s;  };  //putmsg("$cfsetIN "+prefx+"fixedIN:="+s);  getElementById(prefx+"repIN").value=(Cf.isPeriodic() ? Cf.cfrec.join(", ") : "" )  //if(Cf.cvgts.length==0)Cf.cvgts(); // putmsg("$cfsetIN Cf is "+Cf.cftoString()); // putmsg(Cf.cvgtstoString());};function ratSHOW(Rat,prefx){  //alert("ratSHOW "+Rat);   //putmsg("Â¢ratSHOW "+Rat);   if(arguments.length<2)prefx="";   setRKNS(Rat.top,0,Rat.bot,prefx);   Sqrt2Dec(Rat.top,0,0,Rat.bot,prefx);};function sqrfactorXX(n){var N=n;if(n==0)return 1;  if(n<0)n=-n;  var sqrtn=Math.sqrt(n),floorsqrtn=Math.floor(sqrtn);  var nonsqr=Math.round((sqrtn-floorsqrtn)*(sqrtn-floorsqrtn)-floorsqrtn*floorsqrtn+2*floorsqrtn*sqrtn);  alert("sqrfactor of "+n+"="+nonsqr+"*"+(n/nonsqr));  return Math.round(n/nonsqr)};function sqrtSHOW(r,n,s,prefx){  if(arguments.length<2)prefx="";  //var rns=simplifyRNS(r,n,s); // r=rns.R;n=rns.N;s=rns.S;  setRKNS(r,1,n,s,prefx);  putmsg("sqrtSHOW "+[r,n,s]);  Sqrt2Dec(r,1,n,s,prefx);};var DECexpr;function evalDecCF(prefx){ DECexpr=getElementById(prefx+"dec").value.replace(/\s/g,""); var v=getInput(prefx+"dec","Decimal number","+eval"); //putmsg("eval<- "+v); Real2CF(v,prefx,true); var rat=Cf.toRAT(); var newexpr=(DECexpr!=rat.toString().replace(/\s/g,"")&&DECexpr!=v.toString()) putmsg((newexpr?DECexpr+" = ":"")+showrknsdc(rat.num,0,0,rat.den,v,Cf.cftoString()));}function evalDec(prefx){var v; var DECexpr=getElementById(prefx+"dec").value; var v=getInput(prefx+"dec","Decimal number","+eval"); //putmsg("evalDec <- "+v); if(isNaN(DECexpr))      {putmsg((DECexpr+" = "+v).replace(/\-/g,"&minus;"));  //getElementById("dec").value=v      };  Real2CF(v,prefx);  //putmsg("showrnsdc called...");  putmsg(showrknsdc(prefx).replace(/\-/g,"&minus;"));  //putmsg("$evalDec resetting Dec expression");  getElementById(prefx+"dec").value=DECexpr;  return v};function rat2cf(r,s){ // r/s  if(arguments.length==1&&r.num){s=r.den;r=r.num};  //putmsg("rat2cf "+r+" / "+s);  var t=r,b=s,i=-1,q;   Cf.reset();   if(r<0){Cf.sign="-";r=-r}   do{ q=Math.floor(t/b);       r=t-q*b;       if(!isInt(q)||q>1e12)r=0       else{Cf.append(q);            t=b;b=r};   } while (r>1e-15 && !Cf.stopped);   //putmsg("rat2cf makes "+Cf.cftoString());   Cf.cvgts();  //putmsg("rat2cf Cf length="+Cf.cf.length+" := "+Cf.cvgt.length+" "+Cf)   Cf.cf.length=Cf.cvgt.length};function Rat2CF(r,s,prefx,quietQ){ //ASSERT n = 0  if(arguments.length<3)prefx="";  if(arguments.length<4)quietQ=false;  //putmsg("$Rat2CF("+r+","+s+")");  if(arguments.length==0)  {var rnsin=getRNS(prefx);r=rnsin.R;s=rnsin.S}  var g=gcd(r,s);  if(g>1){  if(!quietQ)putmsg(r+"/"+s+" = ");            r=Math.round(r/g);s=Math.round(s/g);            setRKNS(r,"",s,prefx)};  //putmsg("$Rat2CF "+r+" / "+s)  rat2cf(r,s);  //putmsg("$Rat2CF cf "+Cf);  cfsetIN(prefx);};//  MOVED TO CF.js// function Real2Rat(r){//    var nbterms=0,p10=0,den=1,rr;//    with(Math){while(isInt(den*10)&&(r*den-floor(r*den)>0)&&isInt(round(r*den*10))){den*=10}};//  //putmsg("Real2Rat "+r+" "+(round(r*den)-Math.floor(r*den))+" isInt :"+[isInt(round(r*den)),isInt(den)])//    rr=new RAT(round(r*den),den)//    //putmsg("Real2Rat "+r+" -> "+rr)//    return rr// };function Real2CF(r,prefx,quietQ){   if(arguments.length<3)short=false;   //putmsg("$Real2CF: "+r+" @"+prefx);   var i=-1,nbterms,p10,r,q,R,S,rIN,den;   Cf.reset();   //rIN=r.toString();   if(isNaN(r))halt("!! Real2CF given non-real argument");   if(r<=0)HALT("Decimal values must be positive");  //putmsg("$Real2CF r ="+r);   rat=Real2Rat(r);   //if(rIN.indexOf(".")!=-1)p10=rIN.length-rIN.indexOf(".")-1  //putmsg("$Real2CF r="+r+" den="+den);   R=rat.num; //parseInt(rIN.replace(/\./,""));   S=rat.den; //Math.pow(10,p10);   setRKNS(R,0,S,prefx);  // putmsg("$Real2CF rat "+r+" = "+R+(S!=1?"/"+S:""));   rat2cf(R,S);   cfsetIN(prefx);};function Sqrt2Dec(r,k,n,s,prefx){ //alert("Sqrt2Dec");  //putmsg("$sqrt2Dec@"+prefx+" "+[r,n,s]);  if(arguments.length==1)prefx=r;  if(arguments.length<=1){var rkns=getRKNS(prefx); r=rkns.R;n=rkns.N;s=rkns.S;k=rkns.K};  var v=(r+k*Math.sqrt(n))/s;  Dec=v;  if(v<0)HALT("The fraction is negative:"+v);  getElementById(prefx+"dec").value=v;  //putmsg("$Sqrt2Dec "+showrkns(r,k,n,s)+" = "+v);};function doSqrt2CF(prefx){  if(arguments.length==0)prefx="";  var rnsin=getRKNS(prefx);  var r=rnsin.R,n=rnsin.N,s=rnsin.S,k=rnsin.K; // if(r==0&&n==0) // {   if(rnsin.simplified)  putmsg(showrkns(r,(k>0?1:-1),n*k*k,s)+" = "+showrkns(r,k,n,s)) } //putmsg("doSqrt2CF@"+prefx+" "+[r,k,n,s]); // var rkns=simplifyRKNS(r,k,n,s); //r=rkns.R;k=rkns.K;n=rkns.N;s=rkns.S;  //putmsg("doSqrt2CF "+showrkns(r,k,n,s));  Sqrt2Dec(r,k,n,s,prefx);  //putmsg("--dec set");  //putmsg("doSqrt2CF "+[r,k,n,s]);  if(n==0||k==0){Rat2CF(r,s,prefx)}  else{SqrtPeriodicCF(r,k,n,s,prefx)};  //Cf.cvgts(); // putmsg("-- end");  putmsg(showrknsdc(rnsin.R,rnsin.K,rnsin.N,rnsin.S,Dec,Cf.cftoString()).replace(/\-/g,"&minus;"))};function sqrtCF(r,k,n,s){  if(arguments.length==1){s=r.S;n=r.N;k=r.K;r=r.R};  //putmsg("$sqrtCF "+[r,k,n,s]);  Cf.reset();  if(n>=0&&(r+k*Math.sqrt(n))/s<0){Cf.sign="-";s=-s;};  if(k<0){r=-r;s=-s;}; //Allenby&Redfern, Page 266, k must be +1  n=n*k*k;k=1; //putmsg("$sqrtperiodiccf: r="+r+" n="+n+" s="+s+" cf="+Cf);  var Rarr=new Array();Rarr[0]=eval(r);  var Sarr=new Array();Sarr[0]=eval(s);  var sqt=Math.floor(Math.sqrt(n));  if(sqt*sqt==n)  {// putmsg(">> sqrtCF finds rat :"+(r+sqt)+"/"+s);   if(r+sqt<0&&s<0)rat2cf(-r-sqt,-s)   else rat2cf(r+sqt,s)}  else  { if((n-Rarr[0]*Rarr[0]) % Sarr[0] !=0)    {Rarr[0]=Rarr[0]*Math.abs(Sarr[0]);n=n*Sarr[0]*Sarr[0];Sarr[0]=Sarr[0]*Math.abs(Sarr[0]);     if(!isInt(Rarr[0])||!isInt(Sarr[0]))HALT("The numbers have become too large")};    var j=0,i;   //putmsg("Rarr0="+Rarr[0]+" Sarr0="+Sarr[0]+" n="+n+" &radic;n="+Math.sqrt(n));    for(i=1; j==0 && !Cf.cfOFLO; i++)      {Cf.append(Math.floor((Rarr[i-1]+Math.sqrt(n))/Sarr[i-1]));        //putmsg("newterm: "+Cf.lastcf()+" from "+[Rarr[i-1],n,Sarr[i-1]]);       Rarr[i]=(Cf.lastcf()*Sarr[i-1]-Rarr[i-1]);       Sarr[i]=(n-Rarr[i]*Rarr[i])/Sarr[i-1];       for(j=i-1;j>0 && (Rarr[j]!=Rarr[i] || Sarr[j]!=Sarr[i]);j--){};      };     if(!Cf.cfOFLO){ //Cf.cfperiodLWB=j;Cf.cfperiodUPB=i-2         //putmsg("Rec from "+j+".."+(i-2)+" Cf.cf="+Cf.cf);         Cf.cfrec=Cf.cf.slice(j,i-1);Cf.cf.length=j;         }   Cf.cvgts();  };};function SqrtPeriodicCF(r,k,n,s,prefx){  if(arguments.length==0)	  {var rnsin=getRKNS(prefx);r=rnsin.R;n=rnsin.N;s=rnsin.S;k=rnsin.K};  sqrtCF(r,k,n,s);  cfsetIN(prefx);   //if(debug)DBG("______Sqrt to CF_____\r"+Cf.toString()+"\r"+getElementById("dec").value+" ("+eval((-r+Math.sqrt(n))/-s)+")");};function setCf(cfw,cff,cfr,genQ){  putmsg("$setCf: "+cfw+"; "+cff+" [ "+cfr.slice()+"]");  if(arguments.length<4)genQ=false;  Cf.reset();Cf.append(cfw,false,genQ);  for(var i=0;i<cff.length;i++)          if(!isInt( cff[i]))  HALT("This item in your CF is not a whole number:\r"+cff[i])     else if(!genQ&&cff[i]==0 && i>0)         HALT("Only the first number in your CF can be 0.")     else if(!genQ&&cff[i]<0)                 HALT("You cannot have negative numbers in your CF.\rI found "+cff[i])     else  Cf.append(cff[i],false,genQ);  Cf.cfrec=cfr.slice();  Cf.norm();}function setCfIN(prefx,genQ){ // cf IN flds -> GLOBAL Cf  if(arguments.length==0)prefx=outF;  if(arguments.length<2)genQ=false;//putmsg("setCfIN "+prefx);//  var cfwf=getElementById(prefx+"fixedIN").value.replace(/\s/g,""),cff,cfw,//      cfr=getElementById(prefx+"repIN").value.replace(/\.\.\./,"").replace(/\s/g,"")  Cf=StringToCF(getElementById(prefx+"fixedIN").value,getElementById(prefx+"repIN").value,genQ); //putmsg("#setCfIN <-  "+Cf.cftoString());}function revcfIN(prefx){ //putmsg("revcfin");  if(arguments.length==0)prefx="cf";  //putmsg("$revcfIN: "+cfw+";"+cff+"["+cfr+"]");  putmsg("Reversing CF "+Cf+":");  Cf=Cf.reverse(); // putmsg("CF.reverse "+Cf); cfsetIN(prefx);putmsg(CF2Fract(prefx,false));};function recipcfIN(prefx){  if(arguments.length==0)prefx="cf";  setCfIN(prefx);  //putmsg("setCfIN returns");  if(Cf.isZero())HALT("The CF is 0 so has no reciprocal");//  var cfw=Cf.cf[0], cff=Cf.cf.slice(1), cfr=Cf.cfrec.slice(),cfin=Cf.cftoString(),r;//   if(cfw==0)//   { if(cff.length==0) {cfw=cfr.shift();cfr.push(cfw)}//     else cfw=cff.shift() }//   else {cff.unshift(cfw);cfw=0}//   putmsg(">>1/ "+[cfw,cff,cfr],join(" , "));//   setCf(cfw,cff,cfr,prefx);//   putmsg("cvgts...");//   Cf.cvgts();//   putmsg("toRat...");//   r=Cf.toRAT();//   putmsg("1 / "+cfin+" = "+Cf.cftoString()+" = "+r);//  getElementById(prefx+"R").value=r.num;//  getElementById(prefx+"S").value=r.den;//  setRKNS(r.num,0,r.den,prefx);    putmsg("Reciprocal of "+CF2Fract(prefx)+" is:")   if(Cf.cf[0]==0)    {if(Cf.cf.length>1) {//putmsg("remove 0");      Cf.cf=Cf.cf.slice(1)     }else{ //putmsg("roting");         var x=Cf.cfrec[0]; Cf.cf[0]=x;Cf.cfrec.shift();Cf.cfrec.push(x)};         // putmsg("rotate cfrec to "+Cf.cfrec)     }else { Cf.cf.unshift(0); //putmsg("push 0: "+Cf.cf);    }    Cf.norm();  // putmsg("recip: "+Cf);   cfsetIN(prefx);   putmsg(CF2Fract(prefx,false))}function Cfcvgts(negQ){   if(arguments.length==0)negQ=false;  //putmsg("Cfcvgts()");  //putmsg("Cf unset:"+Cf.isUnset());  if(Cf.isUnset())setCfIN(negQ);  //putmsg("Cfcvgts of "+Cf)  Cf.cvgts();  putmsg( //Cf.cftoString()+" has convergents:" +         Cf.cvgtstoString(true),false);  //getElementById("msgmorecf").innerHTML="";};function CF2Fract(prefx,negQ){  if(arguments.length<2)negQ=false; // putmsg('CF2Fract @'+prefx);  setCfIN(prefx,negQ);  if(Cf.isUnset())HALT("Please input some numbers for your CF");  //putmsg("CF2Fract cvgts...");  //putmsg("CF2Fract reads "+Cf.cftoString()); // putmsg("...cvgts");  if(!Cf.isPeriodic())ratSHOW(Cf.toRAT(),prefx)  else CF2Sqrt(prefx);  var r=Cf.toRAT();  var ans= showrknsdc(prefx).replace(/\-/g,"&minus;")  return ans  //putmsg(Cf.cftoString()+" = "+Cf.toDec()+" = "+r)};function CF2Sqrt(prefx){var i; if(arguments.length==0)prefx=""; var CFp=new CF(),CFnp=new CF(); //putmsg("_______CF to sqrt__________\r"); CFp.cf=Cf.cfrec.slice();CFp.cvgts(); CFnp.cf=Cf.cf.slice(); CFnp.cvgts(); if(CFp.stopped)HALT("The period of your CF is too long"); //putmsg(" CF2sqrt CFp: "+CFp.toString()); //-----PERIODIC PART --------- var penultR=CFp.cvgt[CFp.cf.length-2],lastR=CFp.cvgt[CFp.cf.length-1],R,N,S; //putmsg("Period expr from "+penultR+" "+lastR+" of "+CFp.cvgt); var p2=penultR.top,q2=penultR.bot,p1=lastR.top,q1=lastR.bot; var r=p1-q2,n=(p1-q2)*(p1-q2)+4*p2*q1,s=2*q1;// putmsg("=="+[r,n,s]+" todec:"+CFp.toDec()) //var rns=simplifyRKNS(r,1,n,s);r=rns.R;n=rns.N;s=rns.S;k=rns.K var d1=(r+Math.sqrt(n))/s,d2=(-r+Math.sqrt(n))/(-s),dd=CFp.toDec(),pdec=d1;// putmsg("final  p cvgts:"+penultR+","+lastR+"\r r="+r+" n="+n+" s="+s+//       " x="+d1+"  or  "+d2+//       "<br>-------CHECK d1: RHS="+((p1*d1+p2)/(q1*d1+q2))+"  d2:"+((p1*d2+p2)/(q1*d2+q2))); if(Math.abs(d1-dd)>Math.abs(d2-dd)){r=-r;s=-s;pdec=d2}// putmsg(" and nearest to "+dd+" is r="+r+" s="+s); //----INITIAL NON-PERIODIC PART---------// putmsg("NONPERIODICPART: CFnp: "+CFnp.cftoString()+" cf:"+CFnp.cf); if(CFnp.cf.length>0)   {//for(i=0;i<Cf.cfperiodLWB;i++)CFnp.append(Cf.cf[i]);    //if(CFnp.stopped)HALT("The initial (non-period) part of your CF is too long.");    var nppenult=CFnp.cvgt[CFnp.cf.length-2],nplast=CFnp.cvgt[CFnp.cf.length-1];    var P1=nplast.top,Q1=nplast.bot,P2=nppenult.top,Q2=nppenult.bot;    var truedec=CFnp.toDec();  //putmsgto("res","final np cvgts:"+nppenult+","+nplast);  // putmsgto("res","----CHECK: x="+truedec+"  RHS="+(P1*pdec+P2)/(Q1*pdec+Q2));    //var R=(B*r+D*s)*(A*r+C*s)-A*n*B,N=(A*D-B*C)*(A*D-B*C)*s*s*n,S=(B*r+D*s)*(B*r+D*s)-B*B*n;    var alpha=P1*r+P2*s,beta=Q1*r+Q2*s,gamma=beta*P1-alpha*Q1;    R=alpha*beta-P1*Q1*n,S=beta*beta-Q1*Q1*n,N=n*gamma*gamma;    if(  R+P1*Q1*n!=alpha*beta      || S+Q1*Q1*n!=beta*beta      || Math.round(N/gamma)!=n*gamma      )HALT("A number has become too large (some digits have been lost).\rCannot convert this CF to a fraction");  //putmsg("CF2Sqrt to simplify: R="+R+" N="+N+" S="+S)  var RNS=simplifyrns(R,N,S);R=RNS.R;N=RNS.N;S=RNS.S;  // putmsg("toRNS "+[R,N,S]);   //var G=gcd(R,gcd(S,gamma));    //if(debug)DBG("\r---GCD?------ R=",R," S=",S," gamma=",gamma," GCD=",G);    //R=Math.round(R/G);S=Math.round(S/G);gamma=Math.round(gamma/G);N=n*gamma*gamma;    //if(debug && G!=1)DBG("\rGCDed elim: R",R," S=",S," N=",N);    var Dec1=(R+Math.sqrt(N))/S,Dec2=(-R+Math.sqrt(N))/(-S); //   putmsg("  ("+R+" +sqrt "+N+")/ "+S+ "   Dec="+Dec1+" or "+Dec2);    if(Dec1<0||Math.abs(Dec1-truedec)>Math.abs(Dec2-truedec))  {R=-R;S=-S};   } else{R=r;N=n;S=s}; //putmsg("CF2sqrt <- "+[R,N,S]); setRKNS(R,N,S,prefx);  //sqrtSHOW(R,N,S,prefx); Sqrt2Dec(R,1,N,S,prefx); showrknsdc(R,1,N,S,Dec,Cf.cftoString(),prefx);};function CFalt(prefx){ //alert("CFalt "+cf.length+" elts;last is ="+cf[cf.length-1]+(cf[cf.length-1]==1));  //document.ans.res.value = document.ans.res.value+Cf.dump();  if(arguments.length==0)prefx="cf";  setCfIN(prefx);   Cf.altcf();   cfsetIN(prefx);   recrd(prefx);};function egSHOW(prefx){  var which=getSELval(prefx+"eg");       if(which==""){}//{alert("Use the '"+getElementById(prefx+"eg")[0].value+"' selector to choose which kind of example.")}  else if(which=="egfr"){clearall(prefx);setRKNS(3,0,50,prefx); pushme(prefx+'ratRbtn')}  else if(which=="egdec"){clearall(prefx);getElementById(prefx+"dec").value="0.123456790123";pushme(prefx+'decRbtn');}  else if(which=="egpi"){clearall(prefx);getElementById(prefx+"dec").value="Pi + E - phi";pushme(prefx+'decRbtn');}  else if(which=="egsqrt"){clearall(prefx);setRKNS(0,6,1,prefx);pushme(prefx+'ratRbtn');}  else if(which=="egcfrat1"){clearall(prefx);setupCfIN("0;1,2,3","",prefx); pushme(prefx+'cfLbtn');}  else if(which=="egcfrat2"){clearall(prefx);setupCfIN("4;3","1,2",prefx); pushme(prefx+'cfLbtn');}  else if(which=="egeval1"){clearall(prefx);getElementById(prefx+"dec").value="3*4.5 - 7.6/8";pushme(prefx+'decRbtn')}  else if(which=="egeval2"){clearall(prefx);getElementById(prefx+"dec").value="pow((sqrt(5)+1)/2,3)";pushme(prefx+'decRbtn')}  else if(which=="egeval3"){clearall(prefx);getElementById(prefx+"dec").value="cos(Pi*36/180)";pushme(prefx+'decRbtn')}};function clearCF(prefx){  eval(btnoff);   Cf.reset();   getElementById(prefx+"fixedIN").value="";   getElementById(prefx+"repIN").value="";};function clearDec(prefx){    getElementById(prefx+"dec").value="";    Dec=0;};function clearFract(prefx){  getElementById(prefx+"R").value="";  getElementById(prefx+"N").value="";  getElementById(prefx+"S").value="";  checkRADIOval(prefx+"SGN","+")  R=0;K=0;N=0;S=1};function clearall(prefx){  //putmsg("$clearall @"+prefx); // putmsg("CF ="+getElementById(prefx+"fixedIN").value+"["+getElementById(prefx+"repIN").value+"] R="+ // getElementById(prefx+"R").value+" N="+getElementById(prefx+"N").value+" S="+getElementById(prefx+"S").value);  clearCF(prefx);  clearDec(prefx);  clearFract(prefx); // putmsg("cleared");};var btnoff="";function pushme(imgId){ //alert(wh.name+" "+wh.src);  var wh=getElementById(imgId);  if(!wh || !wh.src)halt("pushme "+imgId+" called: no btn found");  if(endswith(wh.src,"pushme.gif"))          {wh.src= wh.src.replace(/pushme/,'');btnoff=""}  else    {wh.src= wh.src.replace(/\.gif/,"pushme.gif");btnoff="pushme('"+imgId+"')"} ;  //putmsg("$pushme "+imgId+" is now "+wh.src+" btnoff:"+btnoff);};function dps(r,d){  var x= (Math.floor(r*Math.pow(10,d))/Math.pow(10,d)).toString();   for(var i=1;x.length-x.indexOf(".")-1<d;i++)x+="0"; return x }function bestRATS(real,prefx){ /* find best rational approximations */  if(arguments.length==1){prefx=real;real=getInput(prefx+"dec","decimal value","+")}  if(arguments.length<2)prefx=outF;  putmsg("bestRATS "+real+" "+prefx);  //if(!confirm(real + [real.toString().indexOf(".")==-1,sameNb(real,Math.round(real))]))HALT();  if(real.toString().indexOf(".")==-1)     {putmsg(real+" is a whole number already");return}  else if(sameNb(real,Math.round(real),1e-13))      {putmsg(real+" is too close to being a whole number already");return};  var maxct=getInput(prefx+"maxct","number of digits limit","+"),	  ct=0;  //if(maxc>16)halt("The maximum number of digits is 16");  if(maxct<1)halt("The number of approximations to find must be at least 1");  //alert(real);  var err=real,t,b,bestt,bestb,approxs=new Array(),str;  bestt=Math.round(real),bestb=1;approxs[1]=new RAT(bestt,bestb);  putmsg(real+" best approximations (no fraction with a smaller denominator is closer):");  str="<table class=resTBL>";  for(var b=2,ct=0; ct<maxct&&Math.abs(err)>1e-15; b++)  {  t=Math.round(b*real);     if(Math.abs(real-bestt/bestb)>Math.abs(real-t/b))        {bestt=t;bestb=b; // approxs[approxs.length]=new RAT(t,b)         rat2cf(t,b);ct++         err=eval(t/b)-real;         str+="<tr>"+ "<td>"+t+"/"+b+"</td>"                     +"<td> = "+Cf.cftoString()+"</td>"           +"<td> = "+dps(eval(t/b),12)+"</td>"           +"<td> err="+(err>=0?"+":"")+err.toPrecision(4)+" ("+(Math.abs(err)*b/t*100).toPrecision(4)+"%)</td>"           +"</tr>"        // putmsg((showrat?t+"/"+b:"")+(showcf?" = "+Cf.cftoString():"")+        //   ((showrat||showcf)&&shownum?" = ":"")+(shownum?dps(eval(t/b),12):"")+        //   (showerr?" err="+err.toFixed(20):""))        }  };  putmsg(str+"</table>")  return approxs };function setRESsize(me){  if(me.indexOf('Show')!=-1)     {getElementById("msgres").style.width="200%"}   else{getElementById("msgres").style.width="100%"}};function euclidCFtable(n,d,cf){   var q,d,r,     s="<table class='m fracTBL' cellpadding=0 cellspacing=0 "+(cf.length>40?" style='font-size:25%'":cf.length>20?" style='font-size:50%'":"")+">"  for(var i=0; i<cf.length; i++)   {q=Math.floor(n/d);r=n%d;    s+="<tr><td>"+n+"</td><td>=</td><td class=blue>"+q+"</td><td>&times;</td><td "+      (r==0?'class=red':'')+">"+d+"</td><td> + </td><td style='padding-right:2px'>"+r+"</td>"      +(i==0?"<td rowspan="+cf.length+" class=vtop style='border-left:2px dotted silver;margin-left:2px'>&nbsp;"+n+"/"+d+"=</td>":"")       + "<td class='blue vtop' "       +" rowspan="+(cf.length-i)+">"       +q+       (i<cf.length-1?" +&nbsp;</td><td class=top colspan="+(cf.length-1-i) +">1":"")+       "</td></tr>";    n=d;d=r};    s+=  "</table>"    //if(outF&&outF!="")putmsg("euclidCFtable <- "+s.replace(/</g,"&lt;").replace(/\/div>/g,"/div><br>"))   return s};var  jigsawcols=["#FF3333","#FFDD33","#FFFF00","#00DD00","#00FFFF","#3388FF","#FF88FF","#FFFFFF"]//["red","darkorange","yellow","#8F8","#88F","#08F","#F0F","#FFF"];function jigsawcol(i){   return jigsawcols[i%jigsawcols.length]};function truejigsawCF(n,d,cf,coffset,fillht){ //n is width, d is height  if(arguments.length<4)coffset=0;  if(arguments.length<5)fillht=200;  var fillwidth=800, toosmallSTR="The squares are too small to show an accurate squares-jigsaw."  var n0=n,d0=d;  var g=gcd(n,d);  if(g>1){n=n/g;d=d/g}; var xpand,sizeQ=true,colQ=true;  var xpand=fillht/d;  if(xpand*n>fillwidth)xpand=Math.round(fillwidth/n); //if(outF)putmsg("TRUEjigsaw "+n+"/"+d+" "+[Math.floor(fillht/d),xpand*n,xpand,typeof xpand,xpand==0]);  if(xpand==0){return toosmallSTR}  var s=(g>1?n0+"/"+g+"="+n+"&rarr;  "+d0+"/"+g+"="+d+"&darr;<br>":"")+"<div style='height:"+d*xpand+"px;position:relative;color:black;font-size:10px;line-height:10px'>",      n0=n,d0=d,top=0,left=0,toppx,leftpx,fontsz,bgcol,txtcol;  for(var i=0;i<cf.length;i++)  {q=Math.floor(n/d);r=n%d;	  if(q>0)	  {for(var j=0;j<q;j++)		{leftpx=(i%2==0?left+j*d:left)*xpand; toppx=(i%2==0?top:top+j*d)*xpand;		 fontsz=Math.round(d*xpand/3);		 dstr=d.toString();		 //if(dstr.length*fontsz>d*xpand)dstr="";		 //1em=fontsize px		 if(fontsz<8)fontsz=8;		 if(fontsz>18)fontsz=18;		 bgcol=jigsawcol(i+coffset);		 txtcol=(brightness(bgcol)>0.4?"black":"white");     //if(outF)putmsg("bg "+bgcol+" txt "+txtcol);		 s+="<div class=divsq style='left:"+leftpx+"px;top:"+toppx+"px;width:"+d*xpand+"px;height:"+d*xpand+"px;"			+(colQ?"background-color:"+bgcol:"")			+"'>" +(sizeQ&&d*xpand>8			  ?"<div style='width:12px;height:12px;font-size:"+fontsz			   +"px;color:"+txtcol+"' class=divsqlabel>"+dstr+"</div>"			  :"")			+"</div>";};		 if(i%2==0){left+=q*d}else{top+=q*d}		};	 n=d;d=r;}	 var ss="";//	 if(g>1)ss="<div style='position:absolute;left:"+Math.round(leftpx+10)+"px;top:"+Math.round(d0*xpand/2)+"px;width:6em;height:1em;'>"+"&times;"+g+"</div>";  //putmsg(ss.replace(/</g,"&lt;")); // putmsg("last d*xpand="+n*xpand)  return s+ss+"</div>"  //(n*xpand<=2?toosmallSTR:s+ss+"</div>")}function jigsawforCF(n,d,cf,coffset){  if(arguments.length<4)coffset=0;  var s="<table class=jigsaw>"+    "<tr><td colspan="+(Math.floor((cf.length)/2))+" class='small center'  style='color:blue'>"+n+"</td></tr>"+    "<tr><td>",    n0=n,d0=d,bgcol,txtcol;  s+="<table cellspacing=0 cellpadding=3 border=1 class='center jigsaw'>";  for(var i=0;i<cf.length;i++)  {q=Math.floor(n/d);r=n%d;bgcol=jigsawcol(i+coffset);   txtcol=(brightness(bgcol)>0.4?"black":"white");   //if(outF)putmsg("col "+bgcol+" txt "+txtcol);   if(q>0)    {s+=(i%2==0?"<tr><td rowspan=":"<td colspan=")      +(1+Math.floor((cf.length-i-1)/2))      +" style='background-color:"+bgcol+";' class="+(brightness(bgcol)<0.4?"white":"black")+">"      +d+""+(q>1?"<span class=divsqsz"+">&times;"+q+(i%2==0?"&rarr;":"&darr;")+"</span>":"")+"</td>"      +(i%2==1?"</tr>":"")};    n=d;d=r};    s+="</table></td><td class='small vmid'  style='color:blue' rowspan="+(Math.floor((cf.length)/2)-1)+">"+d0+"</td></tr></table>";    return s};function euclidCF(prefx){  if(arguments.length==0)prefx=outF;  var n=getInput(prefx+"R","the numerator","+ZnoevalF"),      d=getInput(prefx+"S","the denominator","+ZnoevalF"),q,r,cf=new Array(),N,D,g,fs,i,      divsQ=document.getElementById(prefx+"divsQ");      if(divsQ)divsQ=divsQ.checked      else divsQ=false;  N=n;D=d;  var g=gcd(n,d);  if(g>1){putmsg(n+"/"+d+" = "+(n/g)+"/"+(d/g));n=n/g;d=d/g};  if(!isInt(n)||n<=0)HALT("Numerator must be a positive whole  number");  if(!isInt(d)||d==0)HALT("The denominator is not a positive whole number")  else if(d<=1)HALT("The input fraction "+(g>1?"reduces to":" is ")+" a whole number.");  //alert(n+"/"+d+" "+prefx);  putmsg(N+"/"+D+":");  var s="";  do{q=Math.floor(n/d);r=n%d;cf.push(q);     if(r>0){n=d;d=r}     }    while(r!=0);   // g=d;    n=N;d=D;        var coffset=(cf.length==1||cf[0]==0&&cf.length==2?1:randint(0,cols.length-1));   putmsg("<table class=m cellspacing=0 cellpadding=0 ><tr><td>"+euclidCFtable(n,d,cf)+"</td><td>&nbsp;&nbsp;</td><td>"+jigsawforCF(n,d,cf,coffset)+"</td></tr></table>",false);  //if(d<=200&&n<1000)   putmsg(truejigsawCF(n,d,cf,coffset)); //.replace(/</g,"&lt;").replace(/\/div>/g,"/div><br>"))  putmsg("GCD("+N+","+D+") = <span class=red>"+g+"</span>");  fs=factors(N).reverse(); i=Arraypos(g,fs);  //putmsg(fs+"@"+i);  fs[i]="<span class=red>"+fs[i]+"</span>";  if(divsQ){putmsg("Divisors of "+N+" are "+fs.join(","));            fs=factors(D).reverse();i=Arraypos(g,fs);           //putmsg(".. "+primefactors(D)+"@"+i);           fs[i]="<span class=red>"+fs[i]+"</span>"          putmsg("Divisors of "+D+" are "+fs.join(","))          };  putmsg(N+"/"+D+(g>1?" = "+(N/g)+"/"+(D/g):"")+" has CF <span class=blue>["+cf[0]+"; "+cf.slice(1).join(", ")+"]</span>")}function findeuclid(prefx){  if(arguments.length==0)prefx=outF;  putmsg(CF2Fract(prefx));var r=Cf.toRAT();  if(r=="Infinity")setRKNS("Infinity",0,0,1)  else {setRKNS(r.num,0,r.den,prefx);        euclidCF(prefx)}}function doRat2cf(prefx){var str="";  if(arguments.length==0)prefx=outF;  var rkns=getRKNS(prefx);  var r=new RAT(rkns.R,rkns.S);  if(r.num!=rkns.R)str=rkns.R+"/"+rkns.S+" = ";  rat2cf(rkns.R,rkns.S);  //putmsg(rkns.R+"/"+rkns.S+" = "+(r.num!=rkns.R?r.num+"/"+r.den+" = ":"")+Cf.cftoString());  putmsg(str+r+" = "+Cf.cftoString());  getElementById(prefx+"fixedIN").value=Cf.cftoString().slice(1,-1)};function docf2Rat(prefx){  if(arguments.length==0)prefx=outF;  setCfIN(prefx);  var r=Cf.toRAT();  getElementById(prefx+"R").value=r.num;  getElementById(prefx+"S").value=r.den;  getElementById(prefx+"N").value="";  putmsg(Cf.cftoString()+" = "+r)}	  function errOrd(a,b){return Math.abs(a[2])-Math.abs(b[2])};function doapprox(which,prefx){var r,mind,maxd,rawr;// find BEST i.e. the fraction with no maller denom that is a better approximation// so only a few denoms satisfy this; NEAR find nearest fraction for all denoms in range     if(arguments.length<2)prefx=outF;     if(arguments.length<1){which=getRADIOval(prefx+"order"," which order")};     r=getInput(prefx+"dec","the value to approximate","eval+");rawr=getElementById(prefx+"dec").value;     mind=eval(getInput(prefx+"MinD"," the 'denominator from' ", "N"));     maxd=getInput(prefx+"MaxD"," the 'denominator up to' ","ON");     //putmsg(mind+" .. "+maxd);      if(!isNb(r))HALT(" The value to approximate is not a number");     if(mind=="")HALT("The 'denominator from' value is missing");     if(!isInt(mind))HALT("The 'denominator from'  is not a number");     if(maxd==0||maxd=="")maxd=mind;     if(isNaN(maxd))HALT("The 'denominator up to'  is not a number");     if(maxd<mind)HALT("The 'denominator up to'  cannot be smaller than the 'denominator from' value");  if(r<0)r=-r;  var err=1,approxs=new Array(),padlenn=Math.max(1,Math.round(maxd*r).toString().length),    padlend=Math.max(1,maxd.toString().length);  switch(which){  case "bestcf":		var maxct=getInput(prefx+"maxct","max number of approximations","+"),ct=0;		if(maxct<1)halt("The number of approximations to find must be at least 1");		Cf.reset();		var rat=Real2Rat(r),initrat;		initrat=rat;		rat2cf(rat.num,rat.den);		var cfallterms=Cf.cf.slice(),cfterms;	   // putmsg("cf terms are "+cfallterms);		var str="<table  class='resTBL rowborders' cellspacing=0 cellpadding=0>",			lasterr=1000,err,approx;		for(var i=0;ct<maxct&&i<cfallterms.length&&cfallterms[i]<2*MAXINTsqrt;i++)		{ //putmsg("approx i "+i+" t from "+(i==0?Math.max(Math.round(r),1):1));		   var nextcf=cfallterms.slice(0,i-1);nextcf.push(cfallterms[i]+1);		   for(t=(i==0?Math.round(r):Math.floor(cfallterms[i]/2));		       ct<maxct&&t<=cfallterms[i]&&lasterr>1e-10;		       t++)		  { var cfterms=cfallterms.slice(0,i);cfterms.push(t);			Cf.reset();			Cf.cf=cfterms;			rat=Cf.toRAT();approx=rat.num/rat.den;			 err=approx-r;		   //putmsg(i+":"+cfterms+" "+rat+" err:"+err+" prev="+lasterr)			 if(Math.abs(err)<lasterr)			 {ct++;			  str+="<tr><td>"+rat.num+"/"+rat.den+"</td><td> = "+Cf.cftoString(true)+"</td>"+			   "<td> = "+approx+"</td>"			   +"<td>&nbsp;error "				+(err==0?"0"					 :(err>0?"+":"")+totenpow(err)					   +" ("+totenpow((Math.abs(err)/r*100).toPrecision(4))+"%)")+"</td>"			   +"</tr>";			   lasterr=Math.abs(err)};		 }  }		 putmsg(ct+" best small denominator approximations to<br>"+(rawr!=r?rawr+" = ":"")+r		 +" = "+initrat+":");         if(cfallterms[i]>=MAXINTsqrt||lasterr<=1e-10)            str+="<tr><td colspan=4>Further accurate approximations are not possible with this Calculator</td></tr>";		 putmsg(str+"</table>");		  break;  case "cvgts":		  var rat=Real2Rat(r);		  rat2cf(rat.num,rat.den);		  if(isNaN(rawr))putmsg(rawr+" = "+r);		  putmsg(r+"="+Cf.cftoString()+" has convergents: "+Cf.cvgtstoString(true));		  break;  case "nearDen":  case "nearErr":      {res=new Array();      if(maxd-mind>100)if(!confirm("There are more than 100 denominators to test. Proceed?"))return;      putmsg("Approximating "+(isNaN(rawr)?rawr+" = ":"")+r+         " for "+(maxd>mind&&which=="nearDen"?"all ":"")+"denominator"+(maxd>mind?"s "+mind+".."+maxd +(which=="nearErr"?" best to worst ":"")                            :" "+mind)         +" :");	  for(var d=mind;d<=maxd;d++)		 {  var n=Math.floor(r*d+0.5);res.push([n,d,r-n/d]) };	   if(which=="nearErr") res.sort(errOrd);	   for(var i=0;i<res.length;i++)		  {var n=res[i][0],d=res[i][1],err=res[i][2];		   rat2cf(n,d);		     putmsg(pad(n,padlenn)+n+"/"+				  pad(d,padlend)+d+" = "				  +Number(n/d).toFixed(17)				  +" err= "+(err>0?"+":err==0?"&nbsp;":"")+Number(err).toFixed(16)				  +" CF: "+Cf.cftoString())		  }     }}};function quadroots(a,b,c){ //reutrn:: {roots: Array of RKNS;  reim: "r" or "i"}  var disc=b*b-4*a*c;  var root1=simplifyRKNS(-b,1,disc,2*a),root2=simplifyRKNS(-b,-1,disc,2*a);      if(disc==0)return {roots:[root1],reim:"r"}  else if(disc<0)       {root1=simplifytworoots(-b,1,-disc,2*a);        return {roots:[root1],reim:"i"} // use "+/- I &radic;"  in place of "+&radic;"        }  return {roots:[root1,root2],reim:"r"}};   function simplifytworoots(r,k,n,s){ // (r +/- k Sqrt(n))/s  if(arguments.length==1){s=r.S;n=r.N;k=r.K;r=r.R};  k=k*(n!=0?Math.sqrt(sqrfactor(n)):1)  n=Math.round(n/k/k); // ASSERT sqrt(n) = K sqrt(nn)  var g=(r==0?(k==0?1:k):(k==0||n==0?r:gcd(r,k)));  g=gcd(g,s);    //putmsg("simproots "+[r,k,n,s]+" g:"+g)return {R:r/g,K:k/g,N:n,S:s/g}}  function quadraticStr(a,b,c,x,wide){    //putmsg("qstr "+[a,b,c]);   if(arguments.length<4)x="x";   if(arguments.length<5)wide=true;   return  ((a==1?"":a==-1?"&minus;":a)+(wide?" ":"")+x+"<sup>2</sup>"+(wide?" ":"")+            (b==0?""            :(b== 1 ?(wide?" +":"+")             :b==-1 ?"&minus;"             :b>0?(wide?" + ":"+") +b             : "&minus;"+(-b)             )              +(wide?" "+x+" ":x)            )+            (c==0?"":(c>0?(wide?" + ":"+")+c:"&minus;"+(-c)))             ).replace(/-/g,"&minus;")};function doquadroots(prefx){  var a=getInput(prefx+"A","x^2 coefficient","noevalO"),      b=getInput(prefx+"B","x coefficient","noevalO"),      c=getInput(prefx+"C","the constant ","ZO"), str;  if(typeof a=="string"&&a=="")a=1  else if(typeof a=="string"&&a=="-")a=-1;  if(typeof b=="string"&&b=="")b=1  else if(typeof b=="string"&&b=="-")b=-1;  if(typeof c=="string"&&c=="")c=0;  if(!isInt(a))HALT("The x^2 coefficient must be an integer");  if(a==0)HALT("The x^2 coefficient cannot be 0");  if(!isInt(b))HALT("The x coefficient must be an integer");  if(!isInt(c))HALT("The constant term must be an integer"); //putmsg(">>in "+[a,b,c]); var g=gcd(a,gcd(b,c)); if(g>1){str=quadraticStr(a,b,c,"x",false);a=a/g;b=b/g;c=c/g;         putmsg(str+" has the same roots as "+quadraticStr(a,b,c,"x",false))};  var disc=b*b-4*a*c;  //putmsg(">> "+[a,b,c,disc]);  var Roots=quadroots(a,b,c);  //putmsg(">> roots "+showOBJ(Roots))  var ans=quadraticStr(a,b,c,"x",false)+" has "+(Roots.reim=="i"?"imaginary ":"")     +(Roots.roots.length==1&&Roots.reim=="r"?"double root ":"roots ");     //putmsg("roots::"+Roots.reim+" "+showrkns(Roots.roots[0])+"::"+RKNStype(Roots.roots[0])     //      +(Roots.roots.length==2?showrkns(Roots.roots[1])+"::"+RKNStype(Roots.roots[0]):""));  switch(Roots.reim){  case "r": if(RKNStype(Roots.roots[0])=="int"&&RKNStype(Roots.roots[1])=="int")                ans+=showrkns(Roots.roots[0])+" and "+showrkns(Roots.roots[1])            else {//putmsg(">> sqrtcf of "+showOBJ(Roots.roots[0]));                 sqrtCF(Roots.roots[0]);                  ans+=showrkns(Roots.roots[0])                     + (RKNStype(Roots.roots[0])!="int"?" = "+ Cf :"");                if(Roots.roots.length==2)                   {sqrtCF(Roots.roots[1]);                    ans+=" and "+showrkns(Roots.roots[1])                      + (RKNStype(Roots.roots[1])!="int"?" = "+ Cf:"")                 }};           break;  case "i": //putmsg("imag root "+showrkns(Roots.roots[0]));            ans+=showrkns(Roots.roots[0]).replace("+&radic;","&plusmn;"+Istr+"&radic;");            break; }         var r=-b,n=disc,s=2*a;    var rkns=simplifytworoots(r,1,n,s);    if(RKNStype(Roots.roots[0])=="r")ans+=": "+showrkns(rkns,true).replace(/-/g,"&minus;");    putmsg(ans.replace(/-/g,"&minus;"));     getElementById(prefx+"R").value=rkns.R;  getElementById(prefx+"N").value=(disc==0?"":rkns.N*rkns.K*rkns.K);  getElementById(prefx+"S").value=(rkns.S==1?"":rkns.S);};function doquadr(prefx){  //(S x - (R + Sqrt[N])) (S x - (R - Sqrt[N])) ==  S^2 x^2  - 2 R S x  -N + R^2  var rkns0,rkns2,rkns1,r1,r2,k1,k2,r0,s0,k0,n0,n1,n2,s1,s2,a,b,c,ans,g,rootstr="",root1,root2;  rkns0=getRKNS(prefx,"-0raw");           r0=rkns0.R;k0=rkns0.K;n0=rkns0.N;s0=rkns0.S;  rkns1=simplifyRKNS(rkns0);  rkns2=simplifyRKNS(r0,-k0,n0,s0);  var simplified=rkns0.simplified||rkns1.simplified;  root1=showrkns(rkns1).replace(/-/g,"&minus;");  root2=showrkns(rkns2).replace(/-/g,"&minus;");  //putmsg([r0,k0,n0,s0]+" -> "+root1+", "+root2);   ans=showrkns(rkns0);    if(ans.toString().indexOf("&radic;")>0)ans=ans.replace("+&radic;","&plusmn;&radic;") else if (ans.toString().indexOf("&radic;")==0 || k0*n0!=0)ans="&plusmn;"+ans if(simplified) ans+=" = "+root1+(root2==root1?"":", "+root2);  a=s0*s0; b=-2*r0*s0; c=r0*r0-n0;  g=gcd(a,(c==0?b:b==0?c:gcd(b,c)));  if(g>1){a=a/g;b=b/g;c=c/g};  if(b==0&&c==0)a=1;  ans+= (root1==root2?" is the double root":" are the roots") +" of "+quadraticStr(a,b,c,"x",false);  putmsg(ans.replace(/-/g,"&minus;"));  getElementById(prefx+"A").value=a;  getElementById(prefx+"B").value=b;  getElementById(prefx+"C").value=c;};function donegCF(prefx){  var x=document.getElementById(prefx+"stepsCHK");  var allsteps=(x?x.checked:false);  //alert("allsteps "+allsteps);  var sign=1,hasnegs=false;  if(arguments.length==0)prefx=outF;  //putmsg("setCfIN...");  setCfIN(prefx,true);  //putmsg("...setCfIN to "+Cf);  var cf0=Cf.cf.slice(),cf0cvgts="";  for(var i=1;i<Cf.cf.length;i++)    {if(Cf.cf[i]<=0)hasnegs=true};  var cfin=Cf.cftoString(true);  //putmsg("cf found "+cfin);  var r=Cf.toRAT(),s="",cfneg=[];  //putmsg("toRAT "+r+" isfinite:"+isfinite(r)+" isFinite:"+isFinite(r));  if(!isfinite(r)&&!r.num)  {  //r is NaN or INfinity        sign=1;        putmsg(cfin+" = "+r) ;  }else if(isInt(r)){ putmsg("["+cf0+";] = "+r) }  else {//r is RAT       var d=r.val;		//putmsg("rat  CF "+r+" "+d);	   s=showrknsdc(sign*r.num,1,0,r.den,d,cfin);	   if(d<0){d=-d;r.num=-r.num;sign=-1; //putmsg("d<0");	     for(var i=0;i<Cf.cf.length;i++)cfneg[i]=-Cf.cf[i]};	   rat2cf(r.num,r.den)	   //putmsg("rat2cf -> "+Cf.cftoString());	   s+=(sign<0?" = &minus;"+cftoStringhilite(cfneg):"");	   if(sign>0&&!equalArrays(cf0,  Cf.cf)||	      sign<0&&!equalArrays(cfneg,Cf.cf)) s+=" = "+(sign<0?"&minus;":"")+Cf.cftoString(true);	   putmsg(s)   };    if(allsteps) showStepsRemoveNegs(cf0,prefx)    cfsetIN(prefx)};function cftoStringhilite(cf,fromi,toi){  if(arguments.length==1){fromi=-1;toi=-1};  var s="[",hilit=false;;  for(var i=0;i<cf.length;i++)	{if(i==fromi){hilit=true};	 s+=(hilit?hilite(cf[i]):cf[i]);	 if(i<cf.length-1) s+=(i==0?";":",")	  if(i==toi){hilit=false};	};  return s.replace(/-/g,"&minus;")+"]"};  function hilite(str){    var hilitecol="coral";    return "<span style='color:"+hilitecol+"'>"+str+"</span>"  };function showStepsRemoveNegs(cf){   var prefix="&nbsp;",rarr=hilite(" <span class=symb>&rarr;</span> "),       sign="";  function remove0s(){var s;    var cf0=cf.slice();       for(var i=1;i<cf.length;i++)           if(cf[i]==0)           { if(i<cf.length-1)				 {s=hilite(prefix+"Remove 0: ")+sign+cftoStringhilite(cf0,i,i);				   cf[i-1]+=cf[i+1];				   cf.splice(i,2);altered=true;				   putmsg(s+rarr+sign+cftoStringhilite(cf,i-1,i-1));				   return true}            else{cf.length-=2;                  putmsg(hilite(prefix+"Remove final 0: ")+sign+cftoStringhilite(cf0,i,i)+rarr+sign+cftoStringhilite(cf,i-2,i-2))                  return true}            }    return false  };  function removeNegs(){var b;    var cf0=cf.slice();    for(var i=1;i<cf.length;i++)       if(cf[i]<0)          {b=cf[i];           if(i==cf.length-1)             {cf[i-1]=cf[i-1]-1;cf[cf.length]=-cf[i]-1;cf[i]=1;              putmsg(hilite(prefix+"Remove &minus;"+(-b)+": ")+sign+cftoStringhilite(cf0,i,i)+rarr+sign+cftoStringhilite(cf,i-1,i-1))              }           else{cf[i-1]--;cf.splice(i,0,1);cf[i+1]=-cf[i+1]-1;                for(j=i+2;j<cf.length;j++)cf[j]=-cf[j];                putmsg(hilite(prefix+"Remove &minus;"+(-b)+": ")+sign+cftoStringhilite(cf0,i,i)+rarr+sign+cftoStringhilite(cf,i-1,cf.length-1))           }           return(true)      }   return false  };  function negate(){    if(cf[0]<0)      { var s=hilite(prefix+"Negate: ")+cftoStringhilite(cf,0,0)+rarr+hilite("&minus;");          if(cf.length>1)          {cf[0]=-cf[0]-1;cf[1]--;cf.splice(1,0,1);            putmsg(s+cftoStringhilite(cf,0,2));            return true}          else {cf[0]=-cf[0];                putmsg(s+cftoStringhilite(cf,0,0));                return false}}    return false  }  do{while(remove0s()){}}  while(removeNegs());  //putmsg("steps"+cf);  if(negate())	  {sign="&minus;"		do{while(remove0s()){}}	   while(removeNegs())};  if(cf[0]==0&&cf.length==2&&(cf[1]==1||cf[1]==-1))      {if(cf[1]==1) {putmsg(hilite(prefix+"0+1/1=1: ")+sign+"[0;1]"+rarr+"[1;]");cf[0]=1;cf.length=1}       else         {putmsg(hilite(prefix+"0+1/-1=-1: ")+sign+"[0;-1]"+rarr+(sign==""?"&minus;":"")+"[&minus;1;]");                     sign=(sign==""?"&minus;":"");cf[0]=-1;cf.length=1}      }  else if(cf.length>1 && cf[cf.length-1]==1)       {//putmsg("Alt end...");        if(cf[cf.length-1]==1)         {cf[cf.length-2]++;cf.length--;          putmsg(hilite(prefix+"other ending: ")+sign+cftoStringhilite(cf,cf.length-1,cf.length-1))}       else{cf[cf.length-1]--;cf[cf.length]=1;           putmsg(hilite(prefix+"other ending: ")+sign+cftoStringhilite(cf,cf.length-2,cf.length-1))}        }  return cf}function remove1sF(CF0,showQ){ //remove 1s L to R  //[..,a,1] ->[...,a+1];  [...,a,1,b,C]->[...a+1,-(b+1),C]  var prefix="&nbsp;",rarr=hilite(" <span class=symb>&rarr;</span> ");  var cf=CF0.cf.slice(),changed=true;  if(cf[cf.length-1]==1&&cf.length>1)    {cf[cf.length-2]++;cf.length--; };  while(changed&&cf.length>1)  {changed=false;   for(var i=1;!changed&&i<cf.length;i++)       if(cf[i]==1)		   {var s=cftoStringhilite(cf,i,i);		   cf[i-1]++;cf.splice(i,1);cf[i]=-(cf[i]+1);		   for(var j=i+1;j<cf.length;j++)cf[j]=-cf[j];		   if(showQ)putmsg(prefix+hilite("Remove 1: ")+s+rarr+cftoStringhilite(cf,i-1,cf.length-1))		   changed=true}   //if(changed)putmsg(": "+cf)  };  return ArrayToCF(cf)};function remove1sB(CF0,showQ){ //remove 1s R to L  //[..,a,1] ->[...,a+1];  [...,a,1,b,C]->[...a+1,-(b+1),C] var prefix="&nbsp;",rarr=hilite(" <span class=symb>&rarr;</span> ");  if(arguments.length<2)showQ=true  var cf=CF0.cf.slice(),changed=true;  if(cf[cf.length-1]==1&&cf.length>1)    {cf[cf.length-2]++;cf.length--; //putmsg(": "+cf)    };  if(Arraypos(1,cf)>-1)	  {//putmsg("  "+cf);	  while(changed&&cf.length>1)	  {changed=false;	   for(var i=cf.length-1;!changed&&i>0;i--)		   if(cf[i]==1)			   {s=cftoStringhilite(cf,i,i);			    cf[i-1]++;cf.splice(i,1);cf[i]=-(cf[i]+1);			   for(var j=i+1;j<cf.length;j++)cf[j]=-cf[j];			   if(showQ)putmsg(prefix+hilite("Remove 1: ")+s+rarr+cftoStringhilite(cf,i-1,cf.length-1))			   changed=true			   }	   //if(changed)putmsg(": "+cf)  }   };  return ArrayToCF(cf)};var remove1s=remove1sB;function dorem1s(prefx,dirn){var Cfno1;  if(arguments.length==1)dirn='f';  var x=document.getElementById(prefx+"stepsCHK")  var allsteps=(x?x.checked:false);  setCfIN(prefx,true);  switch(dirn){  case "f":case "F":        //putmsg("F "+Cf);        Cfno1=remove1sF(Cf,allsteps);        //putmsg("F<- "+Cfno1);        break;  case "b":case "B":var cf;      //putmsg("B "+Cf);      if(Arrayhas(-1,Cf.cf))          {if(allsteps&&!Cf.isSimple()){putmsg(hilite("Make all terms positive first:"))                Cf=ArrayToCF(showStepsRemoveNegs(Cf.cf))}           else {//var s=Cf+" rat="+Cf.toRAT()+" cf now ";                 rat2cf(Cf.toRAT()); // putmsg(s+Cf)                 };          // putmsg("B mid:"+Cf)           if(Arrayhas(1,Cf.cf)&&allsteps)putmsg(hilite("Now remove 1s:"));           Cfno1=remove1sB(Cf,allsteps)}      else Cfno1=remove1sB(Cf,allsteps);      break;  };  putmsg(Cf.toString(true)+" = "+Cf.toRAT()+" = "+Cfno1.toString(true));  Cf=Cfno1;//alert("Cf is now "+Cfno1+" @"+prefx);  cfsetIN(prefx);  //CF2Sqrt(prefx);};function dosilver(op){var ans,dec;  var prefx=outF;  var n,disp;       if(op=="1/+"){disp=getInput(outF+"DISP","x","Feval");          if(disp!="Infinity")disp=eval(disp);          var k=getInput(outF+"k","value to add on","eval");          if(k==0)HALT("The value to add on cannot be 0")          ans=(disp=="Infinity"?k:disp==0?"Infinity":1/disp+k);          getElementById(outF+"DISP").value=ans;          putmsg("1/"+disp+" + "+k+" = "+ans)          disp=ans}     else if(op=="v"){            var n=getInput(outF+"n","T(?)","F"),ntype;            if(n==""||n==0){putmsg("T(0) is undefined");ERROR()};    if(n.indexOf(".")>-1){ntype="real";         n=eval(n);dec=n;         putmsg("T("+n+") = [ "+n+"; <span class=overbar>"+n+"</span> ] = "+(n/2)+(n<0?"&minus;":"+")+"&radic;"+(n*n+4)/4+" = "             +(n/2+(n<0?-1:1)*Math.sqrt(n*n/4+1)))         }    else if(n.indexOf("/")>-1){ntype="rat";        var ntop=evalstr(n.slice(0,n.indexOf("/")),"HALT('Rational input detected but numerator is not a number')"),           nbot=evalstr(n.slice(n.indexOf("/")+1),"HALT('Rational input detected but denominator is not a number')");        var ntype="rat";n=new RAT(ntop,nbot);        var rkns=simplifyRKNS(n.num,n.sgnum,n.num*n.num+4*n.den*n.den,2*n.den),R,K,N,S;        R=rkns.R;K=rkns.K;N=rkns.N;S=rkns.S;        putmsg((n.num!=ntop?"T("+ntop+"/"+nbot+") = ":"")+"T("+n+") = [ "+n+"; <span class=overbar>"+n+"</span> ] = "+showrkns(R,K,N,S)+" = "+eval((R+K*Math.sqrt(N))/S))        }    else {ntype="int";n=eval(n);      var rkns=simplifyRKNS(n,1,n*n+4,2); //putmsg(showOBJ(rkns)+typeof n)      var ans=showrkns(rkns.R,(n<0?-1:1)*rkns.K,rkns.N,rkns.S)      putmsg("T("+n+") = [ "+n+"; <span class=overbar>"+n+"</span> ] = "+ans+" = "+(n+(n<0?-1:1)*Math.sqrt(n*n+4))/2)      }}}